#!/usr/bin/env sh

VERSION=${TASK_VERSION:-"3.33.1"}

# Define API
# ==========

# https://github.com/client9/shlib/blob/master/uname_os.sh
detect_os() {
  os=$(uname -s | tr '[:upper:]' '[:lower:]')

  # fixed up for https://git hub.com/client9/shlib/issues/3
  case "$os" in
    msys*) os="windows" ;;
    mingw*) os="windows" ;;
    cygwin*) os="windows" ;;
    win*) os="windows" ;; # for windows busybox and like # https://frippery.org/busybox/
  esac

  # other fixups here
  echo "$os"
}

# https://github.com/client9/shlib/blob/master/uname_arch.sh
detect_arch() {
  arch=$(uname -m)
  case $arch in
    x86_64) arch="amd64" ;;
    x86) arch="386" ;;
    i686) arch="386" ;;
    i386) arch="386" ;;
    aarch64) arch="arm64" ;;
    armv5*) arch="armv5" ;;
    armv6*) arch="armv6" ;;
    armv7*) arch="armv7" ;;
  esac
  echo ${arch}
}

# https://github.com/client9/shlib/blob/master/http_download.sh
download_file() {
  local_file=$1
  source_url=$2
  header=$3
  if [ -z "$header" ]; then
    code=$(curl -w '%{http_code}' -sL -o "$local_file" "$source_url")
  else
    code=$(curl -w '%{http_code}' -sL -H "$header" -o "$local_file" "$source_url")
  fi
  if [ "$code" != "200" ]; then
    echo "Error! Downloading file from URL '$source_url' received HTTP status '$code'"
    return 1
  fi
  return 0
}

download_file_once () {
  URL=$1
  FILE=$2
  if [ ! -f "${FILE}" ]; then
      mkdir -p "$(dirname "$FILE")"
      FILE_TMP="$2.tmp"
      download_file "$FILE_TMP" "$URL"
      mv "$FILE_TMP" "$FILE"
  fi
}

unarchive_file() {
  FILE=$1
  DIR=$2

  rm -fr "$DIR"
  mkdir -p "$DIR"
  if [ "${FILE##*.}" = "zip" ] ; then
    unzip "$FILE" -d "$DIR"
  else
    tar -xf "$FILE" -C "$DIR"
  fi
}


# Download tool
# =============

OS=$(detect_os)
ARCH=$(detect_arch)

AEM_DIR="aem"
HOME_DIR="${AEM_DIR}/home"
DOWNLOAD_DIR="${HOME_DIR}/opt"

BIN_DOWNLOAD_NAME="task"
BIN_ARCHIVE_EXT="tar.gz"
if [ "$OS" = "windows" ] ; then
  BIN_ARCHIVE_EXT="zip"
fi
BIN_DOWNLOAD_URL="https://github.com/go-task/task/releases/download/v${VERSION}/${BIN_DOWNLOAD_NAME}_${OS}_${ARCH}.${BIN_ARCHIVE_EXT}"
BIN_ROOT="${DOWNLOAD_DIR}/${BIN_DOWNLOAD_NAME}/${VERSION}"
BIN_ARCHIVE_FILE="${BIN_ROOT}/${BIN_DOWNLOAD_NAME}.${BIN_ARCHIVE_EXT}"
BIN_ARCHIVE_DIR="${BIN_ROOT}/${BIN_DOWNLOAD_NAME}"
BIN_NAME="task"
BIN_EXEC_FILE="${BIN_ARCHIVE_DIR}/${BIN_NAME}"

if [ ! -f "${BIN_EXEC_FILE}" ]; then
  mkdir -p "${BIN_ARCHIVE_DIR}"
  download_file_once "${BIN_DOWNLOAD_URL}" "${BIN_ARCHIVE_FILE}"
  unarchive_file "${BIN_ARCHIVE_FILE}" "${BIN_ARCHIVE_DIR}"
  chmod +x "${BIN_EXEC_FILE}"
fi

# Prevent OS or shell-specific glitches
# =====================================

# https://stackoverflow.com/questions/7250130/how-to-stop-mingw-and-msys-from-mangling-path-names-given-at-the-command-line
export MSYS_NO_PATHCONV=1
export MSYS2_ARG_CONV_EXCL="*"
export MSYS2_ENV_CONV_EXCL="*"

# Execute Task Tool
# =================

# https://taskfile.dev/api/#env
export TASK_COLOR_GREEN=35

"./${BIN_EXEC_FILE}" "$@"
